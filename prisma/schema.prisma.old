//npx prisma db push - sincronizar banco de dados

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["global", "ccf", "jurfis", "difis"]
}

//----------------------------------- GLOBAL -----------------------------------
model Users {
  id             String    @id @default(uuid()) @map("_id")
  fullname       String
  email          String    @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String
  schema         String //para definir o acesso ao site da loja
  permission     String //para definir o nivel de acesso dentro do site da loja
  authorized     Boolean //para definir se a conta está ativa
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  ccfEmployee CCFEmployees[]

  @@schema("global")
}

model Schemas {
  id        Int      @id @default(autoincrement()) @map("_id")
  schema    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@schema("global")
}

//---------------------------- CÂMARA DE CONCILIAÇÃO FISCAL ---------------------------

//funcionários
model CCFEmployees {
  id        String    @id @default(uuid()) @map("_id")
  userId    String
  fullname  String
  fone      String?
  email     String    @unique
  birthdate DateTime?
  job       String? //para definir a função do funcionário
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user Users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("Employees")
  @@schema("ccf")
}

//agendamentos
model CCFSchedulings {
  id          Int      @id @default(autoincrement()) @map("_id")
  startDate   DateTime
  endDate     DateTime
  type        String //definir se é sessão ou lembrete
  title       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("Schedulings")
  @@schema("ccf")
}

//processos
model CCFProcesses {
  id                Int       @id @default(autoincrement()) @map("_id")
  process           String
  fullname          String
  protocolNumber    Int
  protocolYear      Int
  type              String
  cpfCnpj           String?
  winningWriter     String?
  winningVote       String?
  decisionDate      DateTime?
  decisionNumber    String?
  decisionValue     Decimal?
  decisionEndValue  Decimal?
  publicationDate   DateTime?
  publicationNumber String?
  concluded         Boolean
  observation       String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  contacts        CCFContacts[]
  situations      CCFSituations[]
  representatives CCFRepresentatives[]
  offeredCredit   CCFOfferedCredit[]
  debtorCredit    CCFDebtorCredit[]
  judgments       CCFJudgments[]

  @@map("Processes")
  @@schema("ccf")
}

model CCFContacts {
  id          Int      @id @default(autoincrement()) @map("_id")
  processId   Int
  type        String
  contact     String
  responsible String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  process CCFProcesses @relation(fields: [processId], references: [id], onDelete: Cascade)

  @@map("Contacts")
  @@schema("ccf")
}

model CCFSituations {
  id        Int      @id @default(autoincrement()) @map("_id")
  processId Int
  title     String
  situation String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  process CCFProcesses @relation(fields: [processId], references: [id], onDelete: Cascade)
  files   CCFFiles[]

  @@map("Situations")
  @@schema("ccf")
}

model CCFFiles {
  id            Int      @id @default(autoincrement()) @map("_id")
  situationId   Int
  title         String
  size          Int
  filePath      String
  fileType      String
  fileExtension String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  situations CCFSituations @relation(fields: [situationId], references: [id], onDelete: Cascade)

  @@map("Files")
  @@schema("ccf")
}

model CCFRepresentatives {
  id          Int      @id @default(autoincrement()) @map("_id")
  processId   Int
  responsible String
  type        String
  class       String?
  numberClass String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  process CCFProcesses @relation(fields: [processId], references: [id], onDelete: Cascade)

  @@map("Representatives")
  @@schema("ccf")
}

model CCFOfferedCredit {
  id              Int      @id @default(autoincrement()) @map("_id")
  processId       Int
  object          String
  type            String
  recurringCredit Decimal?
  cityHallCredit  Decimal?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  process CCFProcesses @relation(fields: [processId], references: [id], onDelete: Cascade)

  @@map("OfferedCredit")
  @@schema("ccf")
}

model CCFDebtorCredit {
  id             Int      @id @default(autoincrement()) @map("_id")
  processId      Int
  object         String
  type           String
  cityHallCredit Decimal?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  process CCFProcesses @relation(fields: [processId], references: [id], onDelete: Cascade)

  @@map("DebtorCredit")
  @@schema("ccf")
}

model CCFJudgments {
  id                Int      @id @default(autoincrement()) @map("_id")
  processId         Int
  judgmentDate      DateTime
  judgmentNumber    String?
  distributedMember String
  historic          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  process CCFProcesses @relation(fields: [processId], references: [id], onDelete: Cascade)

  @@map("Judgments")
  @@schema("ccf")
}

//configurações - lista de opções
model CCFProcessTypes {
  id        Int      @id @default(autoincrement()) @map("_id")
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("ProcessTypes")
  @@schema("ccf")
}

model CCFWinningVotes {
  id        Int      @id @default(autoincrement()) @map("_id")
  vote      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("WinningVotes")
  @@schema("ccf")
}

model CCFCreditTypes {
  id        Int      @id @default(autoincrement()) @map("_id")
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("CreditTypes")
  @@schema("ccf")
}

//configurações - membros
model CCFMembers {
  id        Int       @id @default(autoincrement()) @map("_id")
  fullname  String
  fone      String?
  email     String?
  birthdate DateTime?
  type      String //definir se é interno ou externo
  entity    String
  situation Boolean
  gender    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("Members")
  @@schema("ccf")
}

//----------------------------------- JURFIS BOT -----------------------------------
model notificacaoJulgamento {
  id             Int      @id @default(autoincrement()) @map("_id")
  idPLP          Int
  numeroRecurso  Int
  anoRecurso     Int
  tipoRecurso    String
  numeroProcesso String
  razaoSocial    String
  dataJulgamento DateTime
  phone          String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@schema("jurfis")
}

model notificacaoJulgamentoEnviadoWhatsApp {
  id             Int      @id @default(autoincrement()) @map("_id")
  idPLP          Int
  numeroRecurso  Int
  anoRecurso     Int
  tipoRecurso    String
  numeroProcesso String
  razaoSocial    String
  dataJulgamento DateTime
  phone          String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@schema("jurfis")
}

model situacaoRecursos {
  id             Int      @id @default(autoincrement()) @map("_id")
  numeroRecurso  Int
  anoRecurso     Int
  numeroProcesso String
  razaoSocial    String
  situacao       String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@schema("jurfis")
}

//----------------------------------- DIFIS -----------------------------------
model DIFISPautas {
  id            Int      @id @default(autoincrement()) @map("_id")
  number        Int
  title         String
  size          Int
  filePath      String
  fileType      String
  fileExtension String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@schema("difis")
}

model DIFISAcordaos {
  id            Int      @id @default(autoincrement()) @map("_id")
  number        Int
  year          Int
  title         String
  size          Int
  filePath      String
  fileType      String
  fileExtension String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@schema("difis")
}
