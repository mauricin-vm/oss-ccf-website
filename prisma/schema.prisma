generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum Role {
  ADMIN
  FUNCIONARIO
  VISUALIZADOR
}

enum TipoProcesso {
  COMPENSACAO
  DACAO_PAGAMENTO
  TRANSACAO_EXCEPCIONAL
}

enum StatusProcesso {
  RECEPCIONADO
  EM_ANALISE
  EM_PAUTA
  SUSPENSO
  PEDIDO_VISTA
  PEDIDO_DILIGENCIA
  EM_NEGOCIACAO
  JULGADO
  EM_CUMPRIMENTO
  CONCLUIDO
}

enum TipoResultadoJulgamento {
  SUSPENSO
  PEDIDO_VISTA
  PEDIDO_DILIGENCIA
  EM_NEGOCIACAO
  JULGADO
}

enum TipoDecisao {
  DEFERIDO
  INDEFERIDO
  PARCIAL
}

enum PosicaoVoto {
  DEFERIDO
  INDEFERIDO
  PARCIAL
  ABSTENCAO
  AUSENTE
  IMPEDIDO
}

enum TipoVoto {
  RELATOR
  REVISOR
  CONSELHEIRO
}

enum StatusPagamento {
  PENDENTE
  PAGO
  ATRASADO
  CANCELADO
}


// Models
model User {
  id             String          @id @default(cuid())
  email          String          @unique
  name           String
  password       String
  role           Role            @default(FUNCIONARIO)
  active         Boolean         @default(true)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  
  // Relations
  processosCreated    Processo[]       @relation("CreatedBy")
  tramitacoes         Tramitacao[]
  logs                LogAuditoria[]
  historicos          HistoricoProcesso[]
  historicosPauta     HistoricoPauta[] @relation("HistoricoPauta")
}

model Contribuinte {
  id             String          @id @default(cuid())
  cpfCnpj        String?
  nome           String
  email          String?
  telefone       String?
  endereco       String?
  cidade         String?
  estado         String?
  cep            String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  
  // Relations
  processos      Processo[]
  imoveis        Imovel[]
  
  @@index([cpfCnpj])
}

model Processo {
  id                String          @id @default(cuid())
  numero            String          @unique
  tipo              TipoProcesso
  status            StatusProcesso  @default(RECEPCIONADO)
  dataAbertura      DateTime        @default(now())
  dataFinalizacao   DateTime?
  observacoes       String?         @db.Text
  
  // Relations
  contribuinteId    String
  contribuinte      Contribuinte    @relation(fields: [contribuinteId], references: [id])
  
  createdById       String
  createdBy         User            @relation("CreatedBy", fields: [createdById], references: [id])
  
  tramitacoes       Tramitacao[]
  documentos        Documento[]
  pautas            ProcessoPauta[]
  decisoes          Decisao[]
  acordos           Acordo[]
  imoveis           ProcessoImovel[]
  creditos          ProcessoCredito[]
  inscricoes        ProcessoInscricao[] @relation("ProcessoInscricoes")
  historicos        HistoricoProcesso[]
  transacao         TransacaoExcepcional?
  
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  
  @@index([contribuinteId])
  @@index([status])
  @@index([tipo])
}

model Imovel {
  id                String          @id @default(cuid())
  matricula         String          @unique
  endereco          String
  cidade            String
  estado            String
  valorAvaliado     Decimal         @db.Decimal(15, 2)
  descricao         String?         @db.Text
  
  // Relations
  proprietarioId    String
  proprietario      Contribuinte    @relation(fields: [proprietarioId], references: [id])
  
  processos         ProcessoImovel[]
  
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  
  @@index([proprietarioId])
}

model ProcessoImovel {
  id                String          @id @default(cuid())
  
  processoId        String
  processo          Processo        @relation(fields: [processoId], references: [id])
  
  imovelId          String
  imovel            Imovel          @relation(fields: [imovelId], references: [id])
  
  tipoRelacao       String          // "garantia", "dacao", etc
  
  @@unique([processoId, imovelId])
  @@index([processoId])
  @@index([imovelId])
}

model Credito {
  id                String          @id @default(cuid())
  tipo              String          // "precatorio", "credito_tributario", etc
  numero            String          @unique
  valor             Decimal         @db.Decimal(15, 2)
  dataVencimento    DateTime?
  descricao         String?         @db.Text
  
  processos         ProcessoCredito[]
  
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

model ProcessoCredito {
  id                String          @id @default(cuid())
  
  processoId        String
  processo          Processo        @relation(fields: [processoId], references: [id])
  
  creditoId         String
  credito           Credito         @relation(fields: [creditoId], references: [id])
  
  valorUtilizado    Decimal         @db.Decimal(15, 2)
  
  @@unique([processoId, creditoId])
  @@index([processoId])
  @@index([creditoId])
}

model Tramitacao {
  id                String          @id @default(cuid())
  
  processoId        String
  processo          Processo        @relation(fields: [processoId], references: [id])
  
  setorOrigem       String
  setorDestino      String
  dataEnvio         DateTime        @default(now())
  dataRecebimento   DateTime?
  prazoResposta     DateTime?
  observacoes       String?         @db.Text
  
  usuarioId         String
  usuario           User            @relation(fields: [usuarioId], references: [id])
  
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  
  @@index([processoId])
  @@index([usuarioId])
}

model Documento {
  id                String          @id @default(cuid())
  
  processoId        String
  processo          Processo        @relation(fields: [processoId], references: [id])
  
  nome              String
  tipo              String
  url               String
  tamanho           Int
  
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  
  @@index([processoId])
}

model Pauta {
  id                String          @id @default(cuid())
  numero            String          @unique
  dataPauta         DateTime
  status            String          // "aberta", "em_julgamento", "fechada"
  observacoes       String?         @db.Text
  
  processos         ProcessoPauta[]
  sessao            SessaoJulgamento?
  historicos        HistoricoPauta[]
  
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

model ProcessoPauta {
  id                String          @id @default(cuid())
  
  processoId        String
  processo          Processo        @relation(fields: [processoId], references: [id])
  
  pautaId           String
  pauta             Pauta           @relation(fields: [pautaId], references: [id])
  
  ordem             Int
  relator           String?         // Relator técnico (sempre o relator original)
  distribuidoPara   String?         // Para quem foi distribuído o processo
  revisores         String[]        @default([])
  
  // Novo: status específico na sessão
  statusSessao      TipoResultadoJulgamento?
  ataTexto          String?         @db.Text
  motivoSuspensao   String?         @db.Text
  prazoVista        DateTime?
  prazoDiligencia   Int?
  observacoesSessao String?         @db.Text
  
  @@unique([processoId, pautaId])
  @@index([processoId])
  @@index([pautaId])
}

model SessaoJulgamento {
  id                String          @id @default(cuid())

  // Tipo de sessão (obrigatório)
  tipoSessao        TipoSessao      @default(JULGAMENTO)

  // Pauta opcional (apenas para sessões de julgamento)
  pautaId           String?         @unique
  pauta             Pauta?          @relation(fields: [pautaId], references: [id])

  // Agenda para sessões administrativas
  agenda            String?         @db.Text

  dataInicio        DateTime
  dataFim           DateTime?
  ata               String?         @db.Text
  numeroAta         String?
  assuntosAdministrativos String?   @db.Text

  presidenteId      String?
  presidente        Conselheiro?    @relation("SessaoPresidente", fields: [presidenteId], references: [id])

  conselheiros      Conselheiro[]   @relation("SessaoConselheiro")
  decisoes          Decisao[]

  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

model Decisao {
  id                String          @id @default(cuid())
  
  processoId        String
  processo          Processo        @relation(fields: [processoId], references: [id])
  
  sessaoId          String?
  sessao            SessaoJulgamento? @relation(fields: [sessaoId], references: [id])
  
  // Expandido para suportar todos os tipos
  tipoResultado     TipoResultadoJulgamento
  tipoDecisao       TipoDecisao?    // Apenas para JULGADO
  observacoes       String          @db.Text
  dataDecisao       DateTime        @default(now())
  numeroAcordao     String?         @unique
  dataPublicacao    DateTime?
  
  // Campos específicos para cada tipo
  motivoSuspensao   String?         @db.Text
  detalhesNegociacao String?        @db.Text
  conselheiroPedidoVista String?    // Nome do conselheiro que pediu vista
  prazoVista        DateTime?       // Prazo para retorno da vista
  especificacaoDiligencia String?   @db.Text
  prazoDiligencia   Int?       
  
  // Para acordos
  definirAcordo     Boolean         @default(false)
  tipoAcordo        String?         // "aceita_proposta", "contra_proposta", "sem_acordo"
  
  votos             Voto[]
  
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  
  @@index([processoId])
  @@index([sessaoId])
}

model Acordo {
  id                String          @id @default(cuid())

  processoId        String
  processo          Processo        @relation(fields: [processoId], references: [id])

  numeroTermo       String          @unique
  tipoProcesso      TipoProcesso
  dataAssinatura    DateTime
  dataVencimento    DateTime
  observacoes       String?         @db.Text
  status            String          @default("ativo") // ativo, cumprido, vencido, cancelado

  // Relacionamentos com tabelas específicas
  parcelas          Parcela[]
  transacao         AcordoTransacao?
  compensacao       AcordoCompensacao?
  dacao            AcordoDacao?
  inscricoes        AcordoInscricao[]
  creditos          AcordoCredito[]

  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@index([processoId])
  @@index([tipoProcesso])
  @@index([status])
}

enum TipoParcela {
  ENTRADA
  PARCELA_ACORDO
  PARCELA_HONORARIOS
}

model Parcela {
  id                String          @id @default(cuid())

  acordoId          String
  acordo            Acordo          @relation(fields: [acordoId], references: [id])

  tipoParcela       TipoParcela     @default(PARCELA_ACORDO)
  numero            Int
  valor             Decimal         @db.Decimal(15, 2)
  dataVencimento    DateTime
  dataPagamento     DateTime?
  status            StatusPagamento @default(PENDENTE)

  pagamentos        PagamentoParcela[]

  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@index([acordoId])
  @@index([tipoParcela])
  @@index([status])
}

model PagamentoParcela {
  id                String          @id @default(cuid())

  parcelaId         String
  parcela           Parcela         @relation(fields: [parcelaId], references: [id])

  valorPago         Decimal         @db.Decimal(15, 2)
  dataPagamento     DateTime
  formaPagamento    String          // PIX, TED, DINHEIRO, etc
  numeroComprovante String?
  observacoes       String?         @db.Text

  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@index([parcelaId])
  @@index([dataPagamento])
}

model AcordoTransacao {
  id                          String    @id @default(cuid())

  acordoId                    String    @unique
  acordo                      Acordo    @relation(fields: [acordoId], references: [id])

  valorTotalProposto          Decimal   @db.Decimal(15, 2)
  metodoPagamento             String    // 'avista' ou 'parcelado'
  valorEntrada                Decimal?  @db.Decimal(15, 2)
  quantidadeParcelas          Int
  valorParcela                Decimal?  @db.Decimal(15, 2)
  custasAdvocaticias          Decimal?  @db.Decimal(15, 2)
  custasDataVencimento        DateTime?
  custasDataPagamento         DateTime?
  honorariosValor             Decimal?  @db.Decimal(15, 2)
  honorariosMetodoPagamento   String?   // 'avista' ou 'parcelado'
  honorariosParcelas          Int?
  honorariosValorParcela      Decimal?  @db.Decimal(15, 2)

  createdAt                   DateTime  @default(now())
  updatedAt                   DateTime  @updatedAt

  @@index([acordoId])
}

model AcordoCompensacao {
  id                String    @id @default(cuid())

  acordoId          String    @unique
  acordo            Acordo    @relation(fields: [acordoId], references: [id])

  valorTotalCreditos Decimal  @db.Decimal(15, 2)
  valorTotalDebitos  Decimal  @db.Decimal(15, 2)
  valorLiquido       Decimal  @db.Decimal(15, 2)

  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@index([acordoId])
}

model AcordoDacao {
  id                    String    @id @default(cuid())

  acordoId              String    @unique
  acordo                Acordo    @relation(fields: [acordoId], references: [id])

  valorTotalOferecido   Decimal   @db.Decimal(15, 2)
  valorTotalCompensar   Decimal   @db.Decimal(15, 2)
  valorLiquido          Decimal   @db.Decimal(15, 2)

  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@index([acordoId])
}

enum FinalidadeInscricao {
  INCLUIDA_ACORDO
  OFERECIDA_COMPENSACAO
  OFERECIDA_DACAO
}

enum TipoInscricao {
  IMOBILIARIA
  ECONOMICA
}

model AcordoInscricao {
  id                String              @id @default(cuid())

  acordoId          String
  acordo            Acordo              @relation(fields: [acordoId], references: [id], onDelete: Cascade)

  numeroInscricao   String
  tipoInscricao     TipoInscricao
  finalidade        FinalidadeInscricao
  valorTotal        Decimal             @db.Decimal(15, 2)
  descricao         String?             @db.Text
  dataVencimento    DateTime?

  debitos           AcordoDebito[]

  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  @@index([acordoId])
  @@index([numeroInscricao])
  @@index([finalidade])
}

model AcordoDebito {
  id                String          @id @default(cuid())

  inscricaoId       String
  inscricao         AcordoInscricao @relation(fields: [inscricaoId], references: [id], onDelete: Cascade)

  descricao         String
  valorLancado      Decimal         @db.Decimal(15, 2)
  dataVencimento    DateTime

  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@index([inscricaoId])
}

model AcordoCredito {
  id                String    @id @default(cuid())

  acordoId          String
  acordo            Acordo    @relation(fields: [acordoId], references: [id], onDelete: Cascade)

  tipoCredito       String
  numeroCredito     String
  valor             Decimal   @db.Decimal(15, 2)
  descricao         String?   @db.Text
  dataVencimento    DateTime?

  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@index([acordoId])
  @@index([numeroCredito])
}

model Setor {
  id                String          @id @default(cuid())
  nome              String          @unique
  sigla             String          @unique
  email             String?
  responsavel       String?
  ativo             Boolean         @default(true)
  
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

model Conselheiro {
  id                String          @id @default(cuid())
  nome              String
  email             String?
  telefone          String?
  cargo             String?
  origem            String?         // Ex: "Secretaria da Fazenda", "OAB", "Sindicato dos Contadores", etc.
  ativo             Boolean         @default(true)
  
  sessoes           SessaoJulgamento[] @relation("SessaoConselheiro")
  sessoesPresididas SessaoJulgamento[] @relation("SessaoPresidente")
  votos             Voto[]
  
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

model HistoricoProcesso {
  id                String          @id @default(cuid())
  
  processoId        String
  processo          Processo        @relation(fields: [processoId], references: [id], onDelete: Cascade)
  
  usuarioId         String
  usuario           User            @relation(fields: [usuarioId], references: [id])
  
  titulo            String
  descricao         String
  tipo              String          @default("EVENTO") // EVENTO, OBSERVACAO, ALTERACAO, etc.
  
  createdAt         DateTime        @default(now())
  
  @@index([processoId])
  @@index([usuarioId])
  @@index([createdAt])
}

model HistoricoPauta {
  id                String          @id @default(cuid())
  
  pautaId           String
  pauta             Pauta           @relation(fields: [pautaId], references: [id], onDelete: Cascade)
  
  usuarioId         String
  usuario           User            @relation("HistoricoPauta", fields: [usuarioId], references: [id])
  
  titulo            String
  descricao         String
  tipo              String          @default("EVENTO") // EVENTO, PROCESSO_ADICIONADO, PROCESSO_REMOVIDO, ALTERACAO, etc.
  
  createdAt         DateTime        @default(now())
  
  @@index([pautaId])
  @@index([usuarioId])
  @@index([createdAt])
}

model Voto {
  id                String          @id @default(cuid())
  
  decisaoId         String
  decisao           Decisao         @relation(fields: [decisaoId], references: [id], onDelete: Cascade)
  
  conselheiroId     String?
  conselheiro       Conselheiro?    @relation(fields: [conselheiroId], references: [id])
  
  tipoVoto          TipoVoto
  nomeVotante       String          // Nome do relator/revisor/conselheiro
  textoVoto         String?         @db.Text
  posicaoVoto       PosicaoVoto?    // Posição do voto (inclui abstenção, ausência, impedimento)
  acompanhaVoto     String?         // Para conselheiros: "relator", "revisor_1", etc.
  
  ordemApresentacao Int?            // Ordem de apresentação dos votos
  isPresidente      Boolean         @default(false) // Voto de desempate do presidente
  
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  
  @@index([decisaoId])
  @@index([conselheiroId])
}

model LogAuditoria {
  id                String          @id @default(cuid())
  
  usuarioId         String
  usuario           User            @relation(fields: [usuarioId], references: [id])
  
  acao              String
  entidade          String
  entidadeId        String
  dadosAnteriores   Json?
  dadosNovos        Json?
  ip                String?
  userAgent         String?
  
  createdAt         DateTime        @default(now())
  
  @@index([usuarioId])
  @@index([entidade, entidadeId])
}

// Tabelas para Compensação
model ProcessoInscricao {
  id                String          @id @default(cuid())
  
  processoId        String
  processo          Processo        @relation("ProcessoInscricoes", fields: [processoId], references: [id], onDelete: Cascade)
  
  numeroInscricao   String
  tipoInscricao     String          // 'imobiliaria', 'economica'
  
  debitos           ProcessoDebito[]
  
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  
  @@index([processoId])
  @@index([numeroInscricao])
}

model ProcessoDebito {
  id                String          @id @default(cuid())
  
  inscricaoId       String
  inscricao         ProcessoInscricao @relation(fields: [inscricaoId], references: [id], onDelete: Cascade)
  
  descricao         String
  valor             Decimal         @db.Decimal(15, 2)
  dataVencimento    DateTime
  
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  
  @@index([inscricaoId])
}

// Tabelas para Transação Excepcional
model TransacaoExcepcional {
  id                    String              @id @default(cuid())

  // Relação com processo
  processoId            String              @unique
  processo              Processo            @relation(fields: [processoId], references: [id], onDelete: Cascade)

  // Valores calculados
  valorTotalInscricoes  Decimal             @db.Decimal(15, 2)
  valorTotalProposto    Decimal             @db.Decimal(15, 2)
  valorDesconto         Decimal             @db.Decimal(15, 2)
  percentualDesconto    Decimal             @db.Decimal(5, 2)

  // Proposta de pagamento
  proposta              PropostaTransacao?

  // Auditoria
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt

  @@index([processoId])
}

model PropostaTransacao {
  id                    String              @id @default(cuid())

  // Relação com transação
  transacaoId           String              @unique
  transacao             TransacaoExcepcional @relation(fields: [transacaoId], references: [id], onDelete: Cascade)

  // Dados da proposta
  valorTotalProposto    Decimal             @db.Decimal(15, 2)
  metodoPagamento       MetodoPagamento
  valorEntrada          Decimal             @db.Decimal(15, 2) @default(0)
  quantidadeParcelas    Int?
  valorParcela          Decimal?            @db.Decimal(15, 2)

  // Observações
  observacoes           String?             @db.Text

  // Auditoria
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt

  @@index([transacaoId])
}

// Enum para método de pagamento
enum MetodoPagamento {
  A_VISTA
  PARCELADO
}

enum TipoSessao {
  JULGAMENTO
  ADMINISTRATIVA
}
